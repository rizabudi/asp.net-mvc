// <auto-generated />
using System;
using AdminLte.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AdminLte.Data.Migrations.PostgreMigrations
{
    [DbContext(typeof(PostgreDbContext))]
    [Migration("20210222073320_AssesmentDB")]
    partial class AssesmentDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("AdminLte.Models.Assesment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Assesments");
                });

            modelBuilder.Entity("AdminLte.Models.BackendUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int?>("EntityID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("EntityID");

                    b.ToTable("BackendUsers");
                });

            modelBuilder.Entity("AdminLte.Models.CompanyFunction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("CompanyFunctions");
                });

            modelBuilder.Entity("AdminLte.Models.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("AdminLte.Models.Divition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Divitions");
                });

            modelBuilder.Entity("AdminLte.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GroupID")
                        .HasColumnType("integer");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Salary")
                        .HasColumnType("double precision");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("GroupID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("AdminLte.Models.EmployeeGroup", b =>
                {
                    b.Property<int>("GroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GroupID");

                    b.ToTable("EmployeeGroup");
                });

            modelBuilder.Entity("AdminLte.Models.Entity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentEntityID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ParentEntityID");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("AdminLte.Models.EntityHorizontalDimentionScore", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("EntityID")
                        .HasColumnType("integer");

                    b.Property<int?>("HorizontalDimentionID")
                        .HasColumnType("integer");

                    b.Property<int?>("ScheduleID")
                        .HasColumnType("integer");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("EntityID");

                    b.HasIndex("HorizontalDimentionID");

                    b.HasIndex("ScheduleID");

                    b.ToTable("EntityHorizontalDimentionScores");
                });

            modelBuilder.Entity("AdminLte.Models.EntitySectionScore", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("EntityID")
                        .HasColumnType("integer");

                    b.Property<int?>("ScheduleID")
                        .HasColumnType("integer");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<int?>("SectionID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("EntityID");

                    b.HasIndex("ScheduleID");

                    b.HasIndex("SectionID");

                    b.ToTable("EntitySectionScores");
                });

            modelBuilder.Entity("AdminLte.Models.EntitySubVerticalDimentionScore", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("EntityID")
                        .HasColumnType("integer");

                    b.Property<int?>("ScheduleID")
                        .HasColumnType("integer");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<int?>("SubVerticalDimentionID")
                        .HasColumnType("integer");

                    b.Property<float>("TScore")
                        .HasColumnType("real");

                    b.Property<float>("ZScore")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("EntityID");

                    b.HasIndex("ScheduleID");

                    b.HasIndex("SubVerticalDimentionID");

                    b.ToTable("EntitySubVerticalDimentionScores");
                });

            modelBuilder.Entity("AdminLte.Models.EntityVerticalDimentionScore", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("EntityID")
                        .HasColumnType("integer");

                    b.Property<int?>("ScheduleID")
                        .HasColumnType("integer");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<int?>("VerticalDimentionID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("EntityID");

                    b.HasIndex("ScheduleID");

                    b.HasIndex("VerticalDimentionID");

                    b.ToTable("EntityVerticalDimentionScores");
                });

            modelBuilder.Entity("AdminLte.Models.HorizontalDimention", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("SectionID")
                        .HasColumnType("integer");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer");

                    b.Property<int>("SituationEvpDimention")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("SectionID");

                    b.ToTable("HorizontalDimentions");
                });

            modelBuilder.Entity("AdminLte.Models.Participant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CompanyFunctionID")
                        .HasColumnType("integer");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("integer");

                    b.Property<int?>("DivitionID")
                        .HasColumnType("integer");

                    b.Property<int?>("EntityID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FinishedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsCanRetake")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxRetake")
                        .HasColumnType("integer");

                    b.Property<string>("ParticipantUserUserId")
                        .HasColumnType("text");

                    b.Property<int?>("PositionID")
                        .HasColumnType("integer");

                    b.Property<int?>("QuestionPackageID")
                        .HasColumnType("integer");

                    b.Property<int?>("ScheduleID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("CompanyFunctionID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("DivitionID");

                    b.HasIndex("EntityID");

                    b.HasIndex("ParticipantUserUserId");

                    b.HasIndex("PositionID");

                    b.HasIndex("QuestionPackageID");

                    b.HasIndex("ScheduleID");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("AdminLte.Models.ParticipantAnswerSheet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<int?>("ParticipantID")
                        .HasColumnType("integer");

                    b.Property<int?>("ScheduleID")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ParticipantID");

                    b.HasIndex("ScheduleID");

                    b.ToTable("ParticipantAnswerSheets");
                });

            modelBuilder.Entity("AdminLte.Models.ParticipantAnswerSheetLine", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<float>("AnswerScore")
                        .HasColumnType("real");

                    b.Property<int>("AnswerType")
                        .HasColumnType("integer");

                    b.Property<float>("AnswerWeight")
                        .HasColumnType("real");

                    b.Property<string>("CharBoxValue")
                        .HasColumnType("text");

                    b.Property<string>("FreeTextValue")
                        .HasColumnType("text");

                    b.Property<bool>("IsSkipped")
                        .HasColumnType("boolean");

                    b.Property<int>("MatrixRowAnserID")
                        .HasColumnType("integer");

                    b.Property<float>("NumericalBoxValue")
                        .HasColumnType("real");

                    b.Property<int?>("ParticipantAnswerSheetID")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionSquence")
                        .HasColumnType("integer");

                    b.Property<int>("SuggestedAnswerID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ParticipantAnswerSheetID");

                    b.ToTable("ParticipantAnswerSheetLines");
                });

            modelBuilder.Entity("AdminLte.Models.ParticipantHorizontalDimentionScore", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("HorizontalDimentionID")
                        .HasColumnType("integer");

                    b.Property<int?>("ParticipantAnswerSheetLineID")
                        .HasColumnType("integer");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("HorizontalDimentionID");

                    b.HasIndex("ParticipantAnswerSheetLineID");

                    b.ToTable("ParticipantHorizontalDimentionScores");
                });

            modelBuilder.Entity("AdminLte.Models.ParticipantSectionScore", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("ParticipantAnswerSheetLineID")
                        .HasColumnType("integer");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<int?>("SectionID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ParticipantAnswerSheetLineID");

                    b.HasIndex("SectionID");

                    b.ToTable("ParticipantSectionScores");
                });

            modelBuilder.Entity("AdminLte.Models.ParticipantSubVerticalDimentionScore", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("ParticipantAnswerSheetLineID")
                        .HasColumnType("integer");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<int?>("SubVerticalDimentionID")
                        .HasColumnType("integer");

                    b.Property<float>("TScore")
                        .HasColumnType("real");

                    b.Property<float>("ZScore")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("ParticipantAnswerSheetLineID");

                    b.HasIndex("SubVerticalDimentionID");

                    b.ToTable("ParticipantSubVerticalDimentionScores");
                });

            modelBuilder.Entity("AdminLte.Models.ParticipantUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int?>("CompanyFunctionID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("integer");

                    b.Property<int?>("DivitionID")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnType("text");

                    b.Property<int?>("EntityID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int?>("PositionID")
                        .HasColumnType("integer");

                    b.Property<bool>("Sex")
                        .HasColumnType("boolean");

                    b.HasKey("UserId");

                    b.HasIndex("CompanyFunctionID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("DivitionID");

                    b.HasIndex("EntityID");

                    b.HasIndex("PositionID");

                    b.ToTable("ParticipantUsers");
                });

            modelBuilder.Entity("AdminLte.Models.ParticipantVerticalDimentionScore", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("ParticipantAnswerSheetLineID")
                        .HasColumnType("integer");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<int?>("VerticalDimentionID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ParticipantAnswerSheetLineID");

                    b.HasIndex("VerticalDimentionID");

                    b.ToTable("ParticipantVerticalDimentionScores");
                });

            modelBuilder.Entity("AdminLte.Models.Period", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("AdminLte.Models.Position", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("AdminLte.Models.Question", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRandom")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRandomAnswer")
                        .HasColumnType("boolean");

                    b.Property<int>("MatrixSubType")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionType")
                        .HasColumnType("integer");

                    b.Property<int?>("SectionID")
                        .HasColumnType("integer");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("SectionID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("AdminLte.Models.QuestionAnswer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<float>("AnswerScore")
                        .HasColumnType("real");

                    b.Property<int?>("HorizontalDimentionID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<int?>("MatrixQuestionID")
                        .HasColumnType("integer");

                    b.Property<int>("MatrixValue")
                        .HasColumnType("integer");

                    b.Property<int?>("QuestionID")
                        .HasColumnType("integer");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer");

                    b.Property<int?>("SubVerticalDimentionID")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<int?>("VerticalDimentionID")
                        .HasColumnType("integer");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("HorizontalDimentionID");

                    b.HasIndex("MatrixQuestionID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("SubVerticalDimentionID");

                    b.HasIndex("VerticalDimentionID");

                    b.ToTable("QuestionAnswer");
                });

            modelBuilder.Entity("AdminLte.Models.QuestionPackage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("AssesmentID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("AssesmentID");

                    b.ToTable("QuestionPackages");
                });

            modelBuilder.Entity("AdminLte.Models.QuestionPackageLine", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("QuestionID")
                        .HasColumnType("integer");

                    b.Property<int?>("QuestionPackageID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("QuestionPackageID");

                    b.ToTable("QuestionPackageLines");
                });

            modelBuilder.Entity("AdminLte.Models.QuestionPackagePeriod", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("PeriodID")
                        .HasColumnType("integer");

                    b.Property<int?>("QuestionPackageID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("PeriodID");

                    b.HasIndex("QuestionPackageID");

                    b.ToTable("QuestionPackagePeriods");
                });

            modelBuilder.Entity("AdminLte.Models.Schedule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("AssesmentID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EntityID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PeriodID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("SubPeriodID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("AssesmentID");

                    b.HasIndex("EntityID");

                    b.HasIndex("PeriodID");

                    b.HasIndex("SubPeriodID");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("AdminLte.Models.Section", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("AssesmentID")
                        .HasColumnType("integer");

                    b.Property<int>("Construct")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsRandom")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("AssesmentID");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("AdminLte.Models.SubPeriod", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PeriodID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.HasIndex("PeriodID");

                    b.ToTable("SubPeriods");
                });

            modelBuilder.Entity("AdminLte.Models.SubVerticalDimention", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("SectionID")
                        .HasColumnType("integer");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer");

                    b.Property<int>("ValueDriverDimention")
                        .HasColumnType("integer");

                    b.Property<int?>("VerticalDimentionID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("SectionID");

                    b.HasIndex("VerticalDimentionID");

                    b.ToTable("SubVerticalDimentions");
                });

            modelBuilder.Entity("AdminLte.Models.VerticalDimention", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("SectionID")
                        .HasColumnType("integer");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer");

                    b.Property<int>("ValueDriverDimention")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("SectionID");

                    b.ToTable("VerticalDimentions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AdminLte.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("AdminLte.Models.BackendUser", b =>
                {
                    b.HasOne("AdminLte.Models.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityID");

                    b.HasOne("AdminLte.Models.User", "User")
                        .WithOne("BackendUser")
                        .HasForeignKey("AdminLte.Models.BackendUser", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdminLte.Models.Employee", b =>
                {
                    b.HasOne("AdminLte.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdminLte.Models.EmployeeGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdminLte.Models.Entity", b =>
                {
                    b.HasOne("AdminLte.Models.Entity", "ParentEntity")
                        .WithMany("SubEntities")
                        .HasForeignKey("ParentEntityID");
                });

            modelBuilder.Entity("AdminLte.Models.EntityHorizontalDimentionScore", b =>
                {
                    b.HasOne("AdminLte.Models.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityID");

                    b.HasOne("AdminLte.Models.HorizontalDimention", "HorizontalDimention")
                        .WithMany()
                        .HasForeignKey("HorizontalDimentionID");

                    b.HasOne("AdminLte.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleID");
                });

            modelBuilder.Entity("AdminLte.Models.EntitySectionScore", b =>
                {
                    b.HasOne("AdminLte.Models.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityID");

                    b.HasOne("AdminLte.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleID");

                    b.HasOne("AdminLte.Models.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionID");
                });

            modelBuilder.Entity("AdminLte.Models.EntitySubVerticalDimentionScore", b =>
                {
                    b.HasOne("AdminLte.Models.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityID");

                    b.HasOne("AdminLte.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleID");

                    b.HasOne("AdminLte.Models.SubVerticalDimention", "SubVerticalDimention")
                        .WithMany()
                        .HasForeignKey("SubVerticalDimentionID");
                });

            modelBuilder.Entity("AdminLte.Models.EntityVerticalDimentionScore", b =>
                {
                    b.HasOne("AdminLte.Models.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityID");

                    b.HasOne("AdminLte.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleID");

                    b.HasOne("AdminLte.Models.VerticalDimention", "VerticalDimention")
                        .WithMany()
                        .HasForeignKey("VerticalDimentionID");
                });

            modelBuilder.Entity("AdminLte.Models.HorizontalDimention", b =>
                {
                    b.HasOne("AdminLte.Models.Section", "Section")
                        .WithMany("HorizontalDimentions")
                        .HasForeignKey("SectionID");
                });

            modelBuilder.Entity("AdminLte.Models.Participant", b =>
                {
                    b.HasOne("AdminLte.Models.CompanyFunction", "CompanyFunction")
                        .WithMany()
                        .HasForeignKey("CompanyFunctionID");

                    b.HasOne("AdminLte.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");

                    b.HasOne("AdminLte.Models.Divition", "Divition")
                        .WithMany()
                        .HasForeignKey("DivitionID");

                    b.HasOne("AdminLte.Models.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityID");

                    b.HasOne("AdminLte.Models.ParticipantUser", "ParticipantUser")
                        .WithMany()
                        .HasForeignKey("ParticipantUserUserId");

                    b.HasOne("AdminLte.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionID");

                    b.HasOne("AdminLte.Models.QuestionPackage", "QuestionPackage")
                        .WithMany()
                        .HasForeignKey("QuestionPackageID");

                    b.HasOne("AdminLte.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleID");
                });

            modelBuilder.Entity("AdminLte.Models.ParticipantAnswerSheet", b =>
                {
                    b.HasOne("AdminLte.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantID");

                    b.HasOne("AdminLte.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleID");
                });

            modelBuilder.Entity("AdminLte.Models.ParticipantAnswerSheetLine", b =>
                {
                    b.HasOne("AdminLte.Models.ParticipantAnswerSheet", "ParticipantAnswerSheet")
                        .WithMany()
                        .HasForeignKey("ParticipantAnswerSheetID");
                });

            modelBuilder.Entity("AdminLte.Models.ParticipantHorizontalDimentionScore", b =>
                {
                    b.HasOne("AdminLte.Models.HorizontalDimention", "HorizontalDimention")
                        .WithMany()
                        .HasForeignKey("HorizontalDimentionID");

                    b.HasOne("AdminLte.Models.ParticipantAnswerSheetLine", "ParticipantAnswerSheetLine")
                        .WithMany()
                        .HasForeignKey("ParticipantAnswerSheetLineID");
                });

            modelBuilder.Entity("AdminLte.Models.ParticipantSectionScore", b =>
                {
                    b.HasOne("AdminLte.Models.ParticipantAnswerSheetLine", "ParticipantAnswerSheetLine")
                        .WithMany()
                        .HasForeignKey("ParticipantAnswerSheetLineID");

                    b.HasOne("AdminLte.Models.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionID");
                });

            modelBuilder.Entity("AdminLte.Models.ParticipantSubVerticalDimentionScore", b =>
                {
                    b.HasOne("AdminLte.Models.ParticipantAnswerSheetLine", "ParticipantAnswerSheetLine")
                        .WithMany()
                        .HasForeignKey("ParticipantAnswerSheetLineID");

                    b.HasOne("AdminLte.Models.SubVerticalDimention", "SubVerticalDimention")
                        .WithMany()
                        .HasForeignKey("SubVerticalDimentionID");
                });

            modelBuilder.Entity("AdminLte.Models.ParticipantUser", b =>
                {
                    b.HasOne("AdminLte.Models.CompanyFunction", "CompanyFunction")
                        .WithMany()
                        .HasForeignKey("CompanyFunctionID");

                    b.HasOne("AdminLte.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");

                    b.HasOne("AdminLte.Models.Divition", "Divition")
                        .WithMany()
                        .HasForeignKey("DivitionID");

                    b.HasOne("AdminLte.Models.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityID");

                    b.HasOne("AdminLte.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionID");

                    b.HasOne("AdminLte.Models.User", "User")
                        .WithOne("ParticipantUser")
                        .HasForeignKey("AdminLte.Models.ParticipantUser", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdminLte.Models.ParticipantVerticalDimentionScore", b =>
                {
                    b.HasOne("AdminLte.Models.ParticipantAnswerSheetLine", "ParticipantAnswerSheetLine")
                        .WithMany()
                        .HasForeignKey("ParticipantAnswerSheetLineID");

                    b.HasOne("AdminLte.Models.VerticalDimention", "VerticalDimention")
                        .WithMany()
                        .HasForeignKey("VerticalDimentionID");
                });

            modelBuilder.Entity("AdminLte.Models.Question", b =>
                {
                    b.HasOne("AdminLte.Models.Section", "Section")
                        .WithMany("Questions")
                        .HasForeignKey("SectionID");
                });

            modelBuilder.Entity("AdminLte.Models.QuestionAnswer", b =>
                {
                    b.HasOne("AdminLte.Models.HorizontalDimention", "HorizontalDimention")
                        .WithMany()
                        .HasForeignKey("HorizontalDimentionID");

                    b.HasOne("AdminLte.Models.Question", "MatrixQuestion")
                        .WithMany("QuestionAnswerMatrixs")
                        .HasForeignKey("MatrixQuestionID");

                    b.HasOne("AdminLte.Models.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionID");

                    b.HasOne("AdminLte.Models.SubVerticalDimention", "SubVerticalDimention")
                        .WithMany()
                        .HasForeignKey("SubVerticalDimentionID");

                    b.HasOne("AdminLte.Models.VerticalDimention", "VerticalDimention")
                        .WithMany()
                        .HasForeignKey("VerticalDimentionID");
                });

            modelBuilder.Entity("AdminLte.Models.QuestionPackage", b =>
                {
                    b.HasOne("AdminLte.Models.Assesment", "Assesment")
                        .WithMany()
                        .HasForeignKey("AssesmentID");
                });

            modelBuilder.Entity("AdminLte.Models.QuestionPackageLine", b =>
                {
                    b.HasOne("AdminLte.Models.Question", "Question")
                        .WithMany("QuestionPackageLines")
                        .HasForeignKey("QuestionID");

                    b.HasOne("AdminLte.Models.QuestionPackage", "QuestionPackage")
                        .WithMany("QuestionPackageLines")
                        .HasForeignKey("QuestionPackageID");
                });

            modelBuilder.Entity("AdminLte.Models.QuestionPackagePeriod", b =>
                {
                    b.HasOne("AdminLte.Models.Period", "Period")
                        .WithMany("QuestionPackagePeriods")
                        .HasForeignKey("PeriodID");

                    b.HasOne("AdminLte.Models.QuestionPackage", "QuestionPackage")
                        .WithMany("QuestionPackagePeriods")
                        .HasForeignKey("QuestionPackageID");
                });

            modelBuilder.Entity("AdminLte.Models.Schedule", b =>
                {
                    b.HasOne("AdminLte.Models.Assesment", "Assesment")
                        .WithMany("Schedules")
                        .HasForeignKey("AssesmentID");

                    b.HasOne("AdminLte.Models.Entity", "Entity")
                        .WithMany("Schedules")
                        .HasForeignKey("EntityID");

                    b.HasOne("AdminLte.Models.Period", "Period")
                        .WithMany("Schedules")
                        .HasForeignKey("PeriodID");

                    b.HasOne("AdminLte.Models.SubPeriod", "SubPeriod")
                        .WithMany()
                        .HasForeignKey("SubPeriodID");
                });

            modelBuilder.Entity("AdminLte.Models.Section", b =>
                {
                    b.HasOne("AdminLte.Models.Assesment", "Assesment")
                        .WithMany("Sections")
                        .HasForeignKey("AssesmentID");
                });

            modelBuilder.Entity("AdminLte.Models.SubPeriod", b =>
                {
                    b.HasOne("AdminLte.Models.Period", "Period")
                        .WithMany("SubPeriods")
                        .HasForeignKey("PeriodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdminLte.Models.SubVerticalDimention", b =>
                {
                    b.HasOne("AdminLte.Models.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionID");

                    b.HasOne("AdminLte.Models.VerticalDimention", "VerticalDimention")
                        .WithMany("SubVerticalDimentions")
                        .HasForeignKey("VerticalDimentionID");
                });

            modelBuilder.Entity("AdminLte.Models.VerticalDimention", b =>
                {
                    b.HasOne("AdminLte.Models.Section", "Section")
                        .WithMany("VerticalDimentions")
                        .HasForeignKey("SectionID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
