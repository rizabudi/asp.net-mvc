@{
    var section = (Section)ViewData["Section"];
    var entities = (Dictionary<string, string>)ViewData["Entities"];
}

@if (section.ID != 0 && section.Construct == Construct.CULTURE)
{
    var dashboardCulture = (Dictionary<VerticalDimention, double>)ViewData["DashboardCulture"];
    var akhlakData = dashboardCulture.Select(x => new { @x = x.Key.Name, @y = x.Value });

    var dashboardCulture1 = (Dictionary<ValueDriverDimention, double>)ViewData["DashboardCulture1"];

    var radarAkhlakJson = Json.Serialize(akhlakData).ToString();
    var gauageAkhlakData = dashboardCulture.Any() ? dashboardCulture.Average(x => x.Value) : 0;

    <input type="hidden" id="radar-akhlak-value" value="@radarAkhlakJson" />
    <input type="hidden" id="gauge-akhlak-value" value="@gauageAkhlakData" />

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Index Value Akhlak Total</h3>
                </div>
                <div class="card-body" style="padding:5px">
                    <div style="width: 100%; height: 45vh;" id="chart-akhlak1"></div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Index Value Akhlak</h3>
                </div>
                <div class="card-body">
                    <div style="width: 100%; height: 41vh;" id="chart-akhlak2"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        @foreach (ValueDriverDimention key in dashboardCulture1.Keys)
        {
            var gauageData = dashboardCulture1[key];
            <input type="hidden" id="gauge-akhlak-@key" value="@gauageData" />
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Index Value Akhlak @key.ToString()</h3>
                    </div>
                    <div class="card-body" style="padding:5px">
                        <div style="width: 100%; height: 45vh;" id="chart-akhlak-@key"></div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (section.ID != 0 && section.Construct == Construct.ENGAGEMENT)
{
    var dashboardEngagement = (Dictionary<HorizontalDimention, double>)ViewData["DashboardEngagement"];
    var dashboardEngagement1 = (Dictionary<SubVerticalDimention, double>)ViewData["DashboardEngagement1"];

    var engagementData = dashboardEngagement.Select(x => new { @x = x.Key.Name, @y = x.Value });
    var radarEngagementJson = Json.Serialize(engagementData).ToString();
    var gauageEngagementData = dashboardEngagement.Any() ? dashboardEngagement.Average(x => x.Value) : 0;

    <input type="hidden" id="radar-engagement-value" value="@radarEngagementJson" />
    <input type="hidden" id="gauge-engagement-value" value="@gauageEngagementData" />

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Index Value Engagement Total</h3>
                </div>
                <div class="card-body" style="padding:5px">
                    <div style="width: 100%; height: 45vh;" id="chart-engagement1"></div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Index Value Engagement</h3>
                </div>
                <div class="card-body">
                    <div style="width: 100%; height: 41vh;" id="chart-engagement2"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Hasil Engagement</h3>
        </div>
        <div class="card-body">
            <div class="row">
                <table class="table table-striped table-scrollable table-bordered table-hover table-checkable order-column">
                    <thead>
                        <tr>
                            <td width="50px">No</td>
                            <td>Faktor</td>
                            <th width="150px">Index</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            var no = 0;
                        }
                        @foreach (var summary in dashboardEngagement1.OrderByDescending(x => x.Value))
                        {
                            no++;
                            <tr>
                                <td>@no</td>
                                <td>@summary.Key.Name</td>
                                <td align="right">
                                    @summary.Value.ToString("0.00")
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@if (section.ID != 0 && section.Construct == Construct.PERFORMANCE)
{
    var dashboardPerformance = (Dictionary<VerticalDimention, double>)ViewData["DashboardPerformance"];
    if (dashboardPerformance.Any())
    {
        dashboardPerformance.Add(new VerticalDimention { Name = "Kinerja Total" }, dashboardPerformance.Average(x => x.Value));
    }
    var performanceData = dashboardPerformance.Select(x => new { @x = x.Key.Name, @y = x.Value }).ToList();
    var columnPerformanceJson = Json.Serialize(performanceData).ToString();

    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Hasil Kinerja</h3>
        </div>
        <div class="card-body" style="padding:5px">
            <input type="hidden" id="column-performance-value" value="@columnPerformanceJson" />
            <div style="width: 100%; max-height: 450px; height: 75vh;" id="chart-performance"></div>
        </div>
    </div>
}

@if (section.ID == 0)
{
    var survey = (QuestionPackage)ViewData["Survey"];
    var entityInfos = new Dictionary<Entity, QuestionPackageEntity>();
    foreach(var questionPackageEntity in survey.QuestionPackageEntities)
    {
        entityInfos.Add(questionPackageEntity.Entity, questionPackageEntity);
    }

    var participants = (Dictionary<Entity, int[]>)ViewData["Participants"];
    var participantSubs = (Dictionary<Entity, int[]>)ViewData["ParticipantSubs"];
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Daftar Per Entitas</h3>
                </div>
                <div class="card-body" style="padding:5px">
                    <table class="table table-striped table-scrollable table-bordered table-hover table-checkable order-column">
                        <thead>
                            <tr>
                                <th style="width:50px">No</th>
                                <th>Entitas</th>
                                <th style="text-align:right; width:100px">Jumlah Karyawan</th>
                                <th style="text-align:right; width:100px">Target Minimum Responden</th>
                                <th style="text-align:right; width:100px">Selesai Mengerjakan</th>
                                <th style="text-align:right; width:100px">Prosentase Responden Total</th>
                                <th style="text-align:right; width:100px">Prosentase Responden Minimum</th>
                                <th style="text-align:right; width:100px">Sedang Mengerjakan</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                var no = 0;
                                var total = 0;
                                var total1 = 0;
                                var total2 = 0;
                                var total3 = 0;
                            }
                            @foreach (Entity entity in participants.Keys)
                            {
                                if (entity.Level == 0)
                                {
                                    continue;
                                }

                                var employeeCount = 0;
                                var targetRespondent = 0;

                                double procentaseRespondentTotal = 0d;
                                double procentaseRespondentMinimum = 0d;

                                if (entityInfos.ContainsKey(entity))
                                {
                                    targetRespondent = entityInfos[entity].TargetRespondent;
                                    employeeCount = entityInfos[entity].EmployeeCount;

                                    procentaseRespondentTotal = (double)participants[entity][1] * 100 / (double)employeeCount;
                                    procentaseRespondentMinimum = (double)participants[entity][1] * 100 / (double)targetRespondent;
                                }

                                no++;
                                total += participants[entity][0];
                                total1 += participants[entity][1];
                                total2 += participants[entity][2];
                                total3 += participants[entity][3];
                                <tr style="background:yellow">
                                    <td>@no</td>
                                    <td>@entity.Name</td>
                                    <td align="right">@employeeCount.ToString("n0")</td>
                                    <td align="right">@targetRespondent.ToString("n0")</td>
                                    <td align="right">@participants[entity][1].ToString("n0")</td>
                                    <td align="right">@Math.Round(procentaseRespondentTotal,2)%</td>
                                    <td align="right">@Math.Round(procentaseRespondentMinimum, 2)%</td>
                                    <td align="right">@participants[entity][2].ToString("n0")</td>
                                </tr>
                                @foreach (Entity subEntity in participantSubs.Where(x => x.Key.ParentEntity == entity).Select(x => x.Key))
                                {
                                    no++;
                                    employeeCount = 0;
                                    targetRespondent = 0;

                                    procentaseRespondentTotal = 0d;
                                    procentaseRespondentMinimum = 0d;

                                    if (entityInfos.ContainsKey(subEntity))
                                    {
                                        targetRespondent = entityInfos[subEntity].TargetRespondent;
                                        employeeCount = entityInfos[subEntity].EmployeeCount;

                                        procentaseRespondentTotal = (double)participantSubs[subEntity][1] * 100 / (double)employeeCount;
                                        procentaseRespondentMinimum = (double)participantSubs[subEntity][1] * 100 / (double)targetRespondent;
                                    }
                                    <tr>
                                        <td>@no</td>
                                        <td>---- @subEntity.Name</td>
                                        <td align="right">@employeeCount.ToString("n0")</td>
                                        <td align="right">@targetRespondent.ToString("n0")</td>
                                        <td align="right">@participantSubs[subEntity][1].ToString("n0")</td>
                                        <td align="right">@Math.Round(procentaseRespondentTotal, 2)%</td>
                                        <td align="right">@Math.Round(procentaseRespondentMinimum, 2)%</td>
                                        <td align="right">@participantSubs[subEntity][2].ToString("n0")</td>
                                    </tr>

                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="col-md-6" style="display:none">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Grafik</h3>
                </div>
                <div class="card-body">
                    @{
                        var pieChartData = new Dictionary<string, int> {
                            { "Selesai",total1 },
                            { "Mengerjakan",total2 },
                            { "Belum\r\nMengerjakan",total3 }
                        };
                            var pieChartJson = Json.Serialize(pieChartData.Select(x => new { key = x.Key, value = x.Value }).ToList()).ToString();
                    }
                    <input type="hidden" id="pie-peserta-value" value="@pieChartJson" />
                    <div style="width: 100%; height: 41vh;" id="chart-peserta"></div>
                </div>
            </div>
        </div>
    </div>
}